
buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'org.github.ngbinh.scalastyle:gradle-scalastyle-plugin_2.11:0.8.2'
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
        classpath 'com.novoda:bintray-release:0.3.2'
    }
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'scala'
    apply plugin: 'net.minecraftforge.gradle.forge'
    apply plugin: 'scalaStyle'

    version = "0.6-1.11.2"

    scalaStyle {
        configLocation = "project/scalastyle_config.xml"
        includeTestSourceDirectory = true
        source = "src/main/scala"
        testSource = "src/test/scala"
    }

    compileScala.dependsOn scalaStyle

    tasks.withType(ScalaCompile) {
        scalaCompileOptions.useAnt = false
        scalaCompileOptions.additionalParameters = ["-language:implicitConversions"]
    }

    idea {
        module {
            inheritOutputDirs = true
        }
    }

    minecraft {
        version = "1.11.2-13.20.1.2530"
        runDir = "run"
        mappings = "snapshot_20170317"

        // TODO: check if with this, the build can be simplified a bit ... no more publish deobfs ? or do I need both?
        // probably for the core, this can be fully unobf, and the mods themselves will be obfuscated ?
        // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
        // issue: https://github.com/easyforger/easyforger/issues/41
    }

    processResources {
        // this will ensure that this task is redone when the versions change.
        inputs.property "version", project.version
        inputs.property "mcversion", project.minecraft.version

        // replace stuff in mcmod.info, nothing else
        from(sourceSets.main.resources.srcDirs) {
            include 'mcmod.info'

            // replace version and mcversion
            expand 'version': project.version, 'mcversion': project.minecraft.version
        }

        // copy everything else, thats not the mcmod.info
        from(sourceSets.main.resources.srcDirs) {
            exclude 'mcmod.info'
        }
    }

    task updateVersionFile {
        def versionFile = file("${project.rootProject.sourceSets.main.scala.srcDirs[0]}/com/easyforger/util/Version.scala")
        def contents = file("${project.rootDir}/project/Version.scala").text

        versionFile.write(contents.replace("{version}", project.version.toString()))
    }
    build.dependsOn updateVersionFile
}

// release stuff
apply plugin: 'com.novoda.bintray-release'

group = "com.easyforger"
archivesBaseName = "easyforger-core" // TODO: rename to simply `easyforger`


// lib release related stuff

import com.novoda.gradle.release.*

def deobfJarPublish(String publicationName, Project project) {
    project.task(publicationName + 'DeobfJar', type: Jar) {
        classifier = 'deobf'
        from sourceSets.main.output
    }
}

publish {
    bintrayUser = project.hasProperty('myBintrayUser') ? myBintrayUser : 'bintray-user'
    bintrayKey = project.hasProperty('myBintrayKey') ? myBintrayKey : 'bintray-key'

    userOrg = 'easyforger'
    groupId = project.group
    artifactId = archivesBaseName

    publishVersion = project.version
    description = 'A DSL / Framework for developing Minecraft Forge mods.'

    website = 'https://easyforger.com'
    issueTracker = 'https://github.com/easyforger/easyforger/issues'
    repository = 'git@github.com:easyforger/easyforger.git'

    dryRun = true

    publishing {
        publications {
            deobfPublication(MavenPublication) {
                groupId project.publish.groupId
                artifactId project.publish.artifactId
                publishVersion project.publish.publishVersion

                Artifacts artifacts = new JavaArtifacts()
                (artifacts.all(it.name, project) + deobfJarPublish(it.name, project)).each {
                    delegate.artifact it
                }
                from artifacts.from(project)
            }
        }
    }

    publications = ['deobfPublication']
}
