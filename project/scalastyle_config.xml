<scalastyle commentFilter="enabled">
    <name>Easyforger Scalastyle configuration</name>
    <check level="error" class="org.scalastyle.file.FileTabChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.file.FileLengthChecker" enabled="true">
        <parameters>
            <parameter name="maxFileLength"><![CDATA[800]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.file.HeaderMatchesChecker" enabled="true">
        <parameters>
            <parameter name="header"><![CDATA[/*
 * This file is part of EasyForger which is released under GPLv3 License.
 * See file LICENSE.txt or go to http://www.gnu.org/licenses/gpl-3.0.en.html for full license details.
 */
]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.SpacesAfterPlusChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.scalariform.SpacesBeforePlusChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.file.FileLineLengthChecker" enabled="true">
        <parameters>
            <parameter name="maxLineLength"><![CDATA[160]]></parameter>
            <parameter name="tabSize"><![CDATA[4]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.ClassNamesChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[[A-Z][A-Za-z]*]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.ObjectNamesChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[[A-Z][A-Za-z]*]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.PackageObjectNamesChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[^[a-z][A-Za-z]*$]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.EqualsHashCodeChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.scalariform.IllegalImportsChecker" enabled="true">
        <parameters>
            <parameter name="illegalImports"><![CDATA[sun._,java.awt._]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.ParameterNumberChecker" enabled="true">
        <parameters>
            <parameter name="maxParameters"><![CDATA[8]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.MagicNumberChecker" enabled="true">
        <parameters>
            <parameter name="ignore"><![CDATA[-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.NoWhitespaceBeforeLeftBracketChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.scalariform.NoWhitespaceAfterLeftBracketChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.scalariform.ReturnChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.scalariform.NullChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.scalariform.NoCloneChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.scalariform.NoFinalizeChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.scalariform.CovariantEqualsChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.scalariform.StructuralTypeChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.file.RegexChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[println]]></parameter>
        </parameters>
        <customMessage>No printlns - should use proper logging</customMessage>
    </check>
    <check level="error" class="org.scalastyle.file.RegexChecker" enabled="true">
        <parameters>
            <parameter name="regex">(?m)^\s*$(\r|)\n^\s*$(\r|)\n</parameter>
            <parameter name="line">false</parameter>
        </parameters>
        <customMessage>No double blank lines</customMessage>
    </check>
    <check level="error" class="org.scalastyle.scalariform.NumberOfTypesChecker" enabled="true">
        <parameters>
            <parameter name="maxTypes"><![CDATA[30]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.CyclomaticComplexityChecker" enabled="true">
        <parameters>
            <parameter name="maximum"><![CDATA[10]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.UppercaseLChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.scalariform.SimplifyBooleanExpressionChecker" enabled="true"/>
    <!--
        Disabled because it cannot support or check  correctly the style defined in the Scala style guide. References:
        - http://docs.scala-lang.org/style/control-structures
        - http://www.scalastyle.org/rules-0.8.0.html#org_scalastyle_scalariform_IfBraceChecker
    -->
    <check level="error" class="org.scalastyle.scalariform.IfBraceChecker" enabled="false">
        <parameters>
            <parameter name="singleLineAllowed"><![CDATA[true]]></parameter>
            <parameter name="doubleLineAllowed"><![CDATA[true]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.MethodLengthChecker" enabled="true">
        <parameters>
            <parameter name="maxLength"><![CDATA[50]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.MethodNamesChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[(\+|^[a-z][A-Za-z0-9]*$)]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.NumberOfMethodsInTypeChecker" enabled="true">
        <parameters>
            <parameter name="maxMethods"><![CDATA[30]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.PublicMethodsHaveTypeChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.file.NewLineAtEofChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.scalariform.WhileChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.scalariform.VarFieldChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.scalariform.VarLocalChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.scalariform.RedundantIfChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.scalariform.TokenChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[println]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.DeprecatedJavaChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.scalariform.EmptyClassChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.scalariform.ClassTypeParameterChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[^[A-Z_]$]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.UnderscoreImportChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.scalariform.LowercasePatternMatchChecker" enabled="true"/>
    <check level="error" class="org.scalastyle.scalariform.MultipleStringLiteralsChecker" enabled="true">
        <parameters>
            <parameter name="allowed"><![CDATA[1]]></parameter>
            <parameter name="ignoreRegex"><![CDATA[^"$]]></parameter>
        </parameters>
    </check>
    <check level="error" class="org.scalastyle.scalariform.ImportGroupingChecker" enabled="true"/>
</scalastyle>
